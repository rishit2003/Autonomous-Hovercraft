#include <avr/io.h>
#include <avr/interrupt.h>

volatile unsigned int TimerOverflow = 0;
volatile unsigned long time_start = 0;
volatile unsigned long time_end = 0;
volatile unsigned long length = 0;
volatile float distance1 = 0;
volatile float distance2=0;


//PINS USED, HS1: P13, HS2: P6, Servo: P9, Lift fan: P18 (PD4 is on P18 mistake in datasheet), Thrust Fan: P4




void setup() {
  pinMode(9, OUTPUT);
DDRD |=(1<<PD4);
PORTD |= (1<<PD4);

DDRD |=(1<<PD6);
PORTD |= (1<<PD6);
  TCCR0A |= (1 << COM0A1) | (1 << WGM00); //| (1 << WGM01);  // Non-inverting mode
  OCR0A = 215;
  TCCR0B |= (1 << CS01)|(1<<CS00);  // Prescaler 8
    

 

  
  TCCR1A = (1 << COM1A1);  // Set OC1A (PB1) as PWM output
  TCCR1B = (1 << WGM13);   // PWM, Phase and Frequency Correct
  ICR1 = 2500;             // Set TOP to generate a 50Hz PWM signal
  TCCR1B |= ((1 << CS11) | (1 << CS10));  // Set prescaler to 64

  Serial.begin(9600);
  DDRB |= (1 << PB5) | (1 << PB3); // Trig for both sensors
  DDRD &= ~((1 << PD3) | (1 << PD2)); // Echo for both sensors
  PORTB &= ~(1 << PB5) & ~(1 << PB3); // Ensure Trigger pins are low initially
  PORTD |= (1 << PD3) | (1 << PD2); // Making sure that the internal pull-up resistors are not active

  // Configure Timer 2 for ultrasonic sensors
  TCCR2A = 0; // Normal operation
  TCCR2B = (1 << CS22); // Prescaler 64
  TIMSK2 |= (1 << TOIE2); // Enable Timer 2 overflow interrupt
}

ISR(TIMER2_OVF_vect) {
  TimerOverflow++; // Increment Timer Overflow count
}

void loop() {
  // First ultrasonic sensor (Echo on PD3, Trig on PB5)
  TCNT2 = 0; // Clear Timer counter
  TimerOverflow = 0; // Clear Timer overflow count

  PORTB |= (1 << PB5); // Trigger pulse for the first sensor
  _delay_us(10);
  PORTB &= ~(1 << PB5);

  while (!(PIND & (1 << PD3))); // Wait for rising edge
  time_start = TCNT2;
  while (PIND & (1 << PD3)); // Wait for falling edge
  time_end = TCNT2;
  length = (time_end - time_start + (TimerOverflow * 256)) * 4; // Adjust for TimerOverflow
  distance1 = length / 58.0; // Convert time to distance (cm)
//delay(2000);
  // Output distance to serial monitor
  Serial.print("Distance (Sensor 1): ");
  Serial.print(distance1);
  Serial.println(" cm");

  // Second ultrasonic sensor (Echo on PD2, Trig on PB3)
  TCNT2 = 0; // Clear Timer counter
  TimerOverflow = 0; // Clear Timer overflow count

  PORTB |= (1 << PB3); // Trigger pulse for the second sensor
  _delay_us(10);
  PORTB &= ~(1 << PB3);

  while (!(PIND & (1 << PD2))); // Wait for rising edge
  time_start = TCNT2;
  while (PIND & (1 << PD2)); // Wait for falling edge
  time_end = TCNT2;
  length = (time_end - time_start + (TimerOverflow * 256)) * 4; // Adjust for TimerOverflow
  distance2 = length / 58.0; // Convert time to distance (cm)

  // Output distance to serial monitor
  Serial.print("Distance (Sensor 2): ");
  Serial.print(distance2);
  Serial.println(" cm");

  // Servo control based on distance from both sensors
  OCR1A = 188; // Default position

  if (distance2 > 60) {
   OCR1A = 188; // Mid position
    delay(2000);
    OCR1A = 303; // Max position
    delay(2000);
  }

  else if (distance1 > 60) {
    OCR1A = 188; // Mid position
    delay(2000);
    OCR1A = 76; // Max position
    delay(2000);
  }
else if(distance1 > 60 && distance2 > 60){
  OCR1A = 188;
}
  OCR1A = 188;
  
}
