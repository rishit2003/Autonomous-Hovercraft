syms x1(t) x2(t) x3(t) x4(t) x5(t) x6(t);


%constants
m=5;
Tu=4;
degrees=00;
Tr=RotationT(Tu, degrees);
b1=5;
b2=5;
b3=5;
I=2;

%Initial Conditions
ic1=0;
ic2=0;
ic3=0;
ic4=0;
ic5=0;
ic6=0;

% Store initial conditions
initial_conditions = [ic1; ic2; ic3; ic4; ic5; ic6];

% Initialize variables to store final values
final_values = initial_conditions;

% System matrices based on professor's notes
A = [0 1 0 0 0 0; 0 (-(b1*1)/m) 0 0 0 0; 0 0 0 1 0 0; 0 0 0 (-(b2*1)/m) 0 0; 0 0 0 0 0 1; 0 0 0 0 0 (-(b3*1)/I)];
B = [0; Tu/m; 0; 0; 0; Tr/I];

t1=0;
t2=5;

counter=0;

while true
% Define symbolic functions
    Y = [x1; x2; x3; x4; x5; x6];
    % Initial conditions
    C = Y(t1) == initial_conditions;

    B = [0; Tu/m; 0; 0; 0; Tr/I];

    % ODE equations
    odes = diff(Y) == A*Y + B;

    % Solve
    [x1Sol(t), x2Sol(t), x3Sol(t), x4Sol(t), x5Sol(t), x6Sol(t)] = dsolve(odes, C);

    % Store final values for initial conditions of next iteration
    final_values = [x1Sol(t2); x2Sol(t2); x3Sol(t2); x4Sol(t2); x5Sol(t2); x6Sol(t2)];

    % Update initial conditions
    initial_conditions = final_values;

    % Graphs
    fplot(x1Sol, [t1, t2],'b')
    hold on
    fplot(x2Sol, [t1, t2],'r')
    hold on
    fplot(x3Sol, [t1, t2],'y')
    hold on
    fplot(x4Sol, [t1, t2],'m')
    hold on
    fplot(x5Sol, [t1, t2],'g')
    hold on
    fplot(x6Sol, [t1, t2],'c')
    hold on

%%% ADD MORE INSTRUCTIONS HERE %%%%
if counter==0
Tu=0;
Tr;
t1=5;
t2=10;
counter=counter+1;
continue
end
if counter==1
break
end

end

grid on
legend('x1Sol','x2Sol','x3Sol','x4Sol','x5Sol','x6Sol','Location','best')


function Tr = RotationT(power, degrees)
    Tr=power*(tand(degrees));
end
