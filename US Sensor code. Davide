//////////////////////////     Servo moves from  0 to 180 when sensor detects distance from 0 to 60


#include <avr/io.h>
#include <avr/interrupt.h>
 
volatile unsigned int TimerOverflow = 0;
volatile unsigned long time_start = 0;
volatile unsigned long time_end = 0;
volatile unsigned long length = 0;
volatile float distance = 0;
volatile float sx=0;
 
void setup() {

pinMode(9,OUTPUT);

  TCCR1A = (1 << COM1A1);  // Set OC1A (PB1) as PWM output
  TCCR1B = (1 << WGM13);   // PWM, Phase and Frequency Correct
  ICR1 = 2500;              // Set TOP to generate a 50Hz PWM signal
  
  TCCR1B |= ((1 << CS11) | (1 << CS10));  // Set prescaler to 64



  Serial.begin(9600);
  DDRB |= (1 << PB5); // Trig   onboard  yellow led
  DDRD &= ~(1 << PD3); // Echo
  PORTB &= ~(1 << PB5); // Ensure Trigger pin is low initially
  PORTD |= (1 << PD3); // Making sure that the internal pull-up resistor is not active.
  DDRB |= (1 << PB3); // Red led
 
  // Configure Timer 2 for ultrasonic sensor
  TCCR2A = 0; // Normal operation
  TCCR2B = (1 << CS22); // Prescaler 64
  TIMSK2 |= (1 << TOIE2); // Enable Timer 2 overflow interrupt
}
 
ISR(TIMER2_OVF_vect) {
  TimerOverflow++; // Increment Timer Overflow count
}
 
void loop() {
  TCNT2 = 0; // Clear Timer counter
  TimerOverflow = 0; // Clear Timer overflow count
 
  // Give 10us trigger pulse on trig. pin to HC-SR04
  PORTB &= ~(1 << PB5);
  _delay_us(10);
  PORTB |= (1 << PB5);
  _delay_us(10);
  PORTB &= ~(1 << PB5);
 
  // Calculate width of Echo by Input Capture (ICP)
  while (!(PIND & (1 << PD3))); // Wait for rising edge
  time_start = TCNT2;
  while (PIND & (1 << PD3)); // Wait for falling edge
  time_end = TCNT2;
  length = (time_end - time_start + (TimerOverflow * 256)) * 4; // Adjust for TimerOverflow
  distance = length / 58.0; // Convert time to distance (cm)
 
  // Output distance to serial monitor
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");
 
/////////////////////////////////////////
//Equation for mapping servo to certain distance:
//    (180/(d2-d1))   *   0.001 * (2500/2) +76
//    
  
  sx=distance*(0.0034)*(2500)/2+76;
  OCR1A=sx;

  delay(20);




}




